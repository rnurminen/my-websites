extends ../../layout/_application.pug

block pageAttributes
  - const pageTitle = 'Configuration - Unnode.js'
  - const pageCanonical = 'https://unnodejs.org/doc/latest/configuration'

block content
  include ../../shared/_navbar.pug

  section.hero.header-image.pt-6.pb-6
    .hero-body
      .container.is-fullhd.mt-6
        h1.title.has-text-white
          | Configuration

  section
    .container.is-fullhd.mt-6.mb-6
      .content
        h2.title Environment variables
        table.table.is-bordered.is-striped.is-hoverable
          thead
            tr
              th Env var
              th Meaning
          tbody
            tr
              th UNNODE_WORKERS
              td
                | Maximum number of CPUs the server should use. Omit or set to 0 to use all CPU
                | cores.
            tr
              th UNNODE_LOGFILE
              td
                | Logfile name. Will be used as:
                br
                span.monospaced server-dir/log/{UNNODE_LOGFILE}-YYYY-MM-DD
                br
                span.monospaced server-dir/log/{UNNODE_LOGFILE} 
                | will be a symlink to current/latest logfile.
                br
                br
                | Logs are automatically rotated and kept for 30 days OR 30 files of 20mb each,
                | whichever comes first.
                br
                br
                | If not set, no logfiles will be produced.
            tr
              th UNNODE_TIMEZONE
              td
                | Timezome for log timestamps.
                br
                br
                | Value must be supported by 
                a(href='https://momentjs.com/timezone/' title='moment-timezone')
                  | https://momentjs.com/timezone/
                br
                br
                | Usually this is autodetected, no need to set unless you want to explicitly change it.
            tr
              th UNNODE_SERVER_LISTEN_HOST
              td
                | IP-address or hostname to bind to.
            tr
              th UNNODE_SERVER_INSECURE_PORT
              td
                | HTTP server listen port (insecure)
                br
                br
                | Omit or set to 0 to skip starting insecure server.
            tr
              th UNNODE_SERVER_SECURE_PORT
              td
                | HTTPS server listen port.
                br
                br
                | If this is set, then...
                br
                br
                strong UNNODE_SERVER_SECURE_DEFAULT_KEY
                br
                strong UNNODE_SERVER_SECURE_DEFAULT_CERT
                br
                strong UNNODE_SERVER_SECURE_DEFAULT_CA
                br
                br
                | ... must also be set.
                br
                br
                | Omit or set to 0 to skip starting secure server.
            tr
              th UNNODE_SERVER_SECURE_DEFAULT_KEY
              td
                | Full path to a certificate key file in PEM format.
            tr
              th UNNODE_SERVER_SECURE_DEFAULT_CERT
              td
                | Full path to certificate file in PEM format.
            tr
              th UNNODE_SERVER_SECURE_DEFAULT_CA
              td
                | Full path to trusted CA certificates file in PEM format. Optional, only set
                | if you want to override the trusted CA certificates.
            tr
              th UNNODE_SERVER_SECURE_MINVERSION
              td
                | Optionally set the minimum TLS version to allow. See 
                a(href='https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options' title='Node.js TLS')
                  | https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
                |  'minversion' for supported values.
            tr
              th UNNODE_SERVER_CONFIG
              td
                | Full path to Unnode.js server config file (see below).
                br
                br
                | Default is 
                span.monospaced server-dir/config/unnode-server-config.js
            tr
              th ROLLBAR_ACCESS_TOKEN
              td
                | Rollbar access token. Setting this and 
                strong ROLLBAR_ENVIRONMENT 
                | will enable Rollbar logging for all log messages of level 'warning' and above.
            tr
              th ROLLBAR_ENVIRONMENT
              td
                | Rollbar environment.
        h2.title Server config file
        p
          | By default, Unnode.js will look for the server config file at 
          span.monospaced server-dir/config/unnode-server-config.js
          |  or at the path specified in 
          strong UNNODE_SERVER_CONFIG 
          | environment variable.
        p
          | See below for an example config file.
        p
          | The file should export an array of objects with the following properties:
        table.table.is-bordered.is-striped.is-hoverable.mb-6
          thead
            tr
              th Property
              th Type
              th Meaning
          tbody
            tr
              th vhost
              td
                | array
              td
                | An array of strings for hostnames where the 
                span.monospaced routes 
                | in this entry should respond to. This can be used to easily host multiple
                | domains on a single instance of Unnode.js.
                br
                br
                | If this only contains one entry 
                span.monospaced '*' 
                | , then this entry will be treated as a wild-card "catch-all" vhost if no other
                | vhost entry matches.
                br
                br
                | You can also use wildcards, e.g. 
                span.monospaced '*.mysite.org' 
                | . This would make the routes respond to any hostname under '.mysite.org'
            tr
              th secureContext
              td
                | object
              td
                | TLS certificate that will be served for this vhost.
            tr
              th secureContext.key
              td
                | string
              td
                | Full path to a certificate key file for this vhost, in PEM format.
                br
                br
                | If your default cert covers the hostnames for this vhost, then you can simply
                | use 
                span.monospaced process.env.UNNODE_SERVER_SECURE_DEFAULT_KEY 
                | here.
            tr
              th secureContext.cert
              td
                | string
              td
                | Full path to certificate file for this vhost, in PEM format.
                br
                br
                | The cert should be valid for all hostnames listed under 
                span.monospaced vhosts
                | .
                br
                br
                | If your default cert covers the hostnames for this vhost, then you can simply
                | use 
                span.monospaced process.env.UNNODE_SERVER_SECURE_DEFAULT_CERT 
                | here.
            tr
              th secureContext.ca
              td
                | string
              td
                | Full path to trusted CA certificates file in PEM format. Optional, only set
                | if you want to override the trusted CA certificates for this vhost.
                br
                br
                | If your default cert covers the hostnames for this vhost, then you can simply
                | use 
                span.monospaced process.env.UNNODE_SERVER_SECURE_DEFAULT_CA 
                | here.
            tr
              th helmetOptions
              td
                | object
              td
                | Helmet configuration. Will be passed directly to the helmet middleware. See 
                a(href='https://helmetjs.github.io/' title='Helmet') https://helmetjs.github.io/
            tr
              th robotsTxt
              td
                | string
              td
                | A string that will be served at 
                span.monospaced /robots.txt
                | . For example: 
                span.monospaced "User-agent: *\nAllow: /"
            tr
              th serveFavicon
              td
                | string
              td
                | Full filesystem path to a favicon file. Will be served at 
                span.monospaced /favicon.ico
            tr
              th routes
              td
                | array
              td
                | Routes configuration
            tr
              th routes[n].method
              td
                | string
              td
                | HTTP method for this route. GET / HEAD / POST / PUT / DELETE / PATCH etc.
            tr
              th routes[n].path
              td
                | string
              td
                | URL path for this route.
            tr
              th routes[n].controller
              td
                | string
              td
                | Controller for this route.
                br
                br
                | Example: 
                span.monospaced unnodejs.org/unnodejs-controller#index 
                br
                br
                | This would route requests for this route to 
                span.monospaced server-dir/controllers/unnodejs.org/unnodejs-controller.js
                | .
                br
                br
                | The file should export a class that contains a method of the name 
                span.monospaced index
                | . Example:
                pre
                  code
                    | const logger  = require('unnode').workerLogger
                    | const unUtils = require('unnode').utils
                    | 
                    | class IndexController {
                    |     constructor() {
                    | 
                    |     }
                    | 
                    |     index(customParameter, req, res) {
                    |         const ip     = unUtils.getClientIp(req)
                    |         const method = req.method
                    |         const url    = unUtils.getRequestFullUrl(req)
                    |         const agent  = req.get('user-agent')
                    | 
                    |         logger.log('info',
                    |             `Request ${method} ${url} (from: ${ip}, `
                    |             + `User-Agent: ${agent})`)
                    | 
                    |         res.send('Hello World!')
                    |     }
                    | }
                    | 
                    | module.exports = new IndexController()
                br
                br
                strong
                  | Either this or 
                  span.monospaced static 
                  | must be set per route.
            tr
              th routes[n].static
              td
                | string
              td
                | Serve a static directory on this route instead. This should be a full filesystem
                | path to the directory you want to serve.
                br
                br
                strong
                  | Either this or 
                  span.monospaced controller 
                  | must be set per route.
            tr
              th routes[n].customParameter
              td
                | any
              td
                | Send a custom variable as the first parameter to the route controller method/function.
            tr
              th routes[n].cacheControl
              td
                | object
              td
                | Cache-Control header directives for this route. This option will be passed directly
                | to the 
                a(href='https://www.npmjs.com/package/express-cache-controller' title='Express Cache-Control middleware') express-cache-controller 
                | middleware.
                br
                br
                | NOTE: Does not apply for 
                span.monospace static 
                | routes, they will be automatically served with:
                br
                br
                span.monospaced Cache-Control: public, max-age=16070400
                br
                br
                | and no Etag and Last-Modified headers (see 
                a(href='https://medium.com/pixelpoint/best-practices-for-cache-control-settings-for-your-website-ff262b38c5a2' title='Best practices for cache control settings for your website') here
                | )

        p.subtitle.is-size-5
          | Example config:
        pre
          code
            | //
            | // config/unnode-server-config.js
            | //
            |
            | module.exports = [
            |     {
            |         // Answer on localhost also for development
            |         'vhost': ['localhost', 'my-site.org'],
            |         'secureContext': {
            |             'key': process.env.UNNODE_SERVER_SECURE_DEFAULT_KEY,
            |             'cert': process.env.UNNODE_SERVER_SECURE_DEFAULT_CERT
            |         },
            |         'helmetOptions': {
            |             // Allow external google font imports in our CSP policy
            |             contentSecurityPolicy: {
            |                 directives: {
            |                     'default-src': ["'self'"],
            |                     'img-src': ["'self'", 'img.shields.io'],
            |                     'style-src': ["'self'", "'unsafe-inline'", 'fonts.googleapis.com'],
            |                     'font-src': ["'self'", 'fonts.gstatic.com'],
            |                     'script-src': ["'self'", "'unsafe-eval'"],
            |                     'object-src': ["'self'"],
            |                 }
            |             }
            |         },
            |         'robotsTxt': "User-agent: *\nAllow: /",
            |         'serveFavicon': path.resolve(__dirname, '..', 'favicon.ico'),
            |         'routes': [
            |             // Serve some html pages
            |             {
            |                 method: 'GET',
            |                 path: '/',
            |                 controller: 'site-controller#index',
            |                 cacheControl: noCache
            |             },
            |             {
            |                 method: 'GET',
            |                 path: '/team',
            |                 controller: 'site-controller#teamPage',
            |                 cacheControl: noCache
            |             },
            | 
            |             // Serve some static assets
            |             { path: '/css', static: path.resolve(__dirname, '..', 'css') },
            |             { path: '/js', static: path.resolve(__dirname, '..', 'js') },
            |             { path: '/images', static: path.resolve(__dirname, '..', 'images') },
            |             { path: '/shared/images', static: path.resolve(__dirname, '..', 'images') },
            |         ]
            |     },
            | 
            |     {
            |         // This will catch every other request not matched to the above vhosts
            |         'vhost': ['*'],
            |         'routes': [
            |             {
            |                 method: 'GET',
            |                 path: '/',
            |                 // Serve a 404 page via our controller
            |                 controller: 'site-controller#not_found'
            |             }
            |         ]
            |     }
            | ]

        p.is-size-5
          | Next: 
          a(href='/doc/latest/process-clustering' title='Documentation: Process clustering')
            | Process clustering
